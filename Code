{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3227b748",
   "metadata": {},
   "outputs": [],
   "source": [
    "import speech_recognition as sr\n",
    "import os\n",
    "import time \n",
    "import pywhatkit\n",
    "import pyautogui\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from twilio.rest import Client\n",
    "from instabot import Bot\n",
    "import cv2\n",
    "from pynput.keyboard import Key, Controller\n",
    "from geopy.geocoders import Nominatim\n",
    "keyboard = Controller()\n",
    "from PIL import Image, ImageDraw\n",
    "from googlesearch import search\n",
    "import boto3\n",
    "import tkinter as tk\n",
    "from cvzone.HandTrackingModule import HandDetector\n",
    "import random\n",
    "import pyttsx3\n",
    "from langchain.llms import OpenAI\n",
    "from langchain.agents import load_tools\n",
    "from langchain.agents import initialize_agent\n",
    "from cvzone.HandTrackingModule import HandDetector\n",
    "import pandas\n",
    "from sklearn.linear_model import LinearRegression\n",
    "import webbrowser\n",
    "from langchain.document_loaders import TextLoader\n",
    "import threading"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f5ded1d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "def ec2_finger():\n",
    "    \n",
    "    def genOS():\n",
    "        ec2=boto3.resource('ec2')\n",
    "        instances= ec2.create_instances(MinCount=1, MaxCount=1, InstanceType=\"t2.micro\", ImageId=\"ami-0ded8326293d3201b\", SecurityGroupIds=['sg-0c7043809b8957ebd'])\n",
    "        return instances[0].id\n",
    "\n",
    "    def delOS(id):\n",
    "        ec2=boto3.resource('ec2')\n",
    "        ec2.instances.filter(InstanceIds=[id]).terminate()\n",
    "\n",
    "    detector = HandDetector(maxHands=1 , detectionCon=0.8 )\n",
    "    allOS=[]\n",
    "    cap = cv2.VideoCapture(0)\n",
    "\n",
    "    while True:\n",
    "        ret,  photo = cap.read()\n",
    "        hand = detector.findHands(photo , draw=False)\n",
    "        if hand:\n",
    "            detectHand = hand[0]\n",
    "            if detectHand:\n",
    "                fingerup = detector.fingersUp(detectHand)\n",
    "                if detectHand['type'] == 'Left':\n",
    "                    for i in fingerup:\n",
    "                        if i==1:\n",
    "                            allOS.append(genOS())\n",
    "\n",
    "                else:\n",
    "                    for i in fingerup:\n",
    "                        if i==1:\n",
    "                            delOS(allOS.pop())\n",
    "\n",
    "        cv2.imshow(\"my photo\", photo)\n",
    "        if cv2.waitKey(10) == 27:\n",
    "            break\n",
    "\n",
    "    cv2.destroyAllWindows()\n",
    "    cap.release()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b7ea4b1a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def linearReg():\n",
    "    \n",
    "    dataset = pandas.read_csv(\"marks.txt\")\n",
    "    model = LinearRegression()\n",
    "    y = dataset['marks']\n",
    "    x = dataset['hrs']\n",
    "    X = x.values.reshape(-1,1)\n",
    "    model.fit(X,y)\n",
    "    print(\"model prediction : \")\n",
    "    print(model.predict([[3]]))\n",
    "    print(\"model Coefficient : \")\n",
    "    print(model.coef_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b105dd2d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def assistant():\n",
    "    \n",
    "\n",
    "    def speak(text):\n",
    "        engine = pyttsx3.init()\n",
    "        engine.say(text)\n",
    "        engine.runAndWait()\n",
    "\n",
    "    def recognize_speech():\n",
    "        recognizer = sr.Recognizer()\n",
    "\n",
    "        with sr.Microphone() as source:\n",
    "            print(\"Listening...\")\n",
    "            audio = recognizer.listen(source)\n",
    "\n",
    "        try:\n",
    "            print(\"Recognizing...\")\n",
    "            text = recognizer.recognize_google(audio)\n",
    "            print(\"You said:\", text)\n",
    "            return text.lower()\n",
    "        except sr.UnknownValueError:\n",
    "            print(\"Sorry, could not understand audio.\")\n",
    "        except sr.RequestError as e:\n",
    "            print(f\"Error with the speech recognition service; {e}\")\n",
    "\n",
    "        return None\n",
    "\n",
    "    def open_whatsapp():\n",
    "        speak(\"Opening WhatsApp.\")\n",
    "        webbrowser.open(\"https://web.whatsapp.com\")\n",
    "        time.sleep(15)  # Wait for 15 seconds to give you time to scan the QR code\n",
    "        speak(\"WhatsApp is now open. You can use it on your browser.\")\n",
    "\n",
    "    if __name__ == \"__main__\":\n",
    "        while True:\n",
    "            recognized_text = recognize_speech()\n",
    "            if recognized_text:\n",
    "                if \"google\" in recognized_text:\n",
    "                    speak(\"Opening Google.\")\n",
    "                    webbrowser.open(\"https://www.google.com\")\n",
    "                elif \"youtube\" in recognized_text:\n",
    "                    speak(\"Opening YouTube.\")\n",
    "                    webbrowser.open(\"https://www.youtube.com\")\n",
    "                    # Wait for a moment before searching for music\n",
    "                    speak(\"What music would you like to listen to?\")\n",
    "                    time.sleep(3)  # Wait for 3 seconds to give you time to respond\n",
    "                    music_name = recognize_speech()\n",
    "                    if music_name:\n",
    "                        url = f\"https://www.youtube.com/results?search_query={music_name}\"\n",
    "                        webbrowser.open(url)\n",
    "                        time.sleep(5)  # Wait for the search results page to load\n",
    "                        # Click on the first video link\n",
    "                        try:\n",
    "                            pyautogui.click(x=800, y=380)  # Adjust the coordinates as per your screen resolution\n",
    "                        except pyautogui.FailSafeException:\n",
    "                            print(\"Failed to click the video link. Please click it manually.\")\n",
    "\n",
    "                elif \"python\" in recognized_text and \"code\" in recognized_text:\n",
    "                    speak(\"Opening Chrome and searching vimal daga.\")\n",
    "                    webbrowser.open(\"https://www.google.com/search?q=vimal+daga\")  # Changed the search query\n",
    "                elif \"vimal daga\" in recognized_text:  # Added a new condition to directly search for \"vimal daga\"\n",
    "                    speak(\"Searching vimal daga on Google.\")\n",
    "                    webbrowser.open(\"https://www.google.com/search?q=vimal+daga\")\n",
    "                elif \"whatsapp\" in recognized_text:\n",
    "                    open_whatsapp()\n",
    "                elif \"exit\" in recognized_text or \"stop\" in recognized_text:\n",
    "                    speak(\"Goodbye!\")\n",
    "                    break\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9b2b5bb7",
   "metadata": {},
   "outputs": [],
   "source": [
    "def rekognition():\n",
    "    client = boto3.client('rekognition',region_name='ap-south-1')\n",
    "    with open(\"vimal.jpeg\",'rb') as imgFile:\n",
    "        imgData=imgFile.read()\n",
    "    response=client.detect_labels(Image={'Bytes':imgData},MaxLabels=8)\n",
    "    response    \n",
    "    labels= response[\"Labels\"]\n",
    "    labels\n",
    "    for label in labels:\n",
    "            print(f\"Label: {label['Name']}, Confidence: {label['Confidence']:.2f}%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "695b5a7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def document_loader():\n",
    "    loader = TextLoader(file_path=\"mona.txt\")\n",
    "    document = loader.load()\n",
    "    from langchain.text_splitter import CharacterTextSplitter\n",
    "    textChunk = CharacterTextSplitter(chunk_size=200)\n",
    "    texts = textChunk.split_documents(document)\n",
    "    len(texts)\n",
    "    myopenkey  = \"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\"\n",
    "    from langchain.embeddings import OpenAIEmbeddings\n",
    "    myembedmodel = OpenAIEmbeddings(openai_api_key=myopenkey)\n",
    "    from langchain.vectorstores import Pinecone\n",
    "    import pinecone\n",
    "    pinecone.init(\n",
    "            api_key=\"c9afbc99-bf1c-4ae2-a4dd-0db419585a0f\",\n",
    "            environment=\"asia-southeast1-gcp-free\"\n",
    "    )\n",
    "    docsearch=Pinecone.from_documents(\n",
    "                    documents = texts,\n",
    "                    embedding = myembedmodel,\n",
    "                    index_name = 'myspindex'        \n",
    "    )\n",
    "    from langchain.llms import OpenAI\n",
    "    from langchain.chains import RetrievalQA\n",
    "    qa =  RetrievalQA.from_chain_type(\n",
    "            llm=OpenAI(openai_api_key= myopenkey),\n",
    "            chain_type=\"stuff\",\n",
    "            retriever=docsearch.as_retriever()\n",
    "    )\n",
    "    myquery = \" who is sachin singh, tell me 10 words\"\n",
    "    qa({\"query\": myquery}) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "093463fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "def cartoon():\n",
    "\n",
    "    def cartoonize_image(image, gray_mode=False):\n",
    "        # Convert image to grayscale\n",
    "        if gray_mode:\n",
    "            gray = image\n",
    "        else:\n",
    "            gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n",
    "\n",
    "        # Apply median blur to reduce noise and smooth the image\n",
    "        gray = cv2.medianBlur(gray, 5)\n",
    "\n",
    "        # Detect edges in the image using adaptive thresholding\n",
    "        edges = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 9, 9)\n",
    "\n",
    "        # Create a color version of the image\n",
    "        color = cv2.bilateralFilter(image, 9, 300, 300)\n",
    "\n",
    "        # Combine the edges with the color image using a bitwise AND operation\n",
    "        cartoon = cv2.bitwise_and(color, color, mask=edges)\n",
    "\n",
    "        return cartoon\n",
    "\n",
    "    def cartoonize_video():\n",
    "        # Start video capture\n",
    "        cap = cv2.VideoCapture(0)\n",
    "\n",
    "        while True:\n",
    "            ret, frame = cap.read()\n",
    "            if not ret:\n",
    "                break\n",
    "\n",
    "            # Flip the frame horizontally for a more intuitive selfie view\n",
    "            frame = cv2.flip(frame, 1)\n",
    "\n",
    "            # Apply cartoonize effect to the frame\n",
    "            cartoon_frame = cartoonize_image(frame)\n",
    "\n",
    "            # Show the original and cartoonized frames side by side\n",
    "            stacked_frames = np.hstack((frame, cartoon_frame))\n",
    "            cv2.imshow(\"Cartoonizer\", stacked_frames)\n",
    "\n",
    "            # Press 'q' to exit the loop\n",
    "            if cv2.waitKey(1) & 0xFF == ord('q'):\n",
    "                break\n",
    "\n",
    "        # Release video capture and destroy windows\n",
    "        cap.release()\n",
    "        cv2.destroyAllWindows()\n",
    "\n",
    "    if __name__ == \"__main__\":\n",
    "        cartoonize_video()\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9287ccdd",
   "metadata": {},
   "outputs": [],
   "source": [
    "def simaltanous():\n",
    "    def function1():\n",
    "        while True:\n",
    "            print(\"aaaaaa\")\n",
    "            time.sleep(1)\n",
    "    def function2():\n",
    "        while True:\n",
    "            print(\"bbbbbb\")\n",
    "            time.sleep(1)\n",
    "    thread1 = threading.Thread(target=function1)\n",
    "    thread1.start()\n",
    "    thread2= threading.Thread( target=function2)\n",
    "    thread2.start()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "eea336b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "def coffeeMaker():\n",
    "    model = HandDetector()\n",
    "    import random as rdm\n",
    "    engine = pyttsx3.init('sapi5')\n",
    "    voices = engine.getProperty('voices')  # getting details of current voice\n",
    "    engine.setProperty('voice',voices[1].id)\n",
    "    cap = cv2.VideoCapture(0)\n",
    "    music_list = ['ishare tere', 'jab koi baat', 'dil meri na sune', 'calm down', 'dheere dheere se meri jingdi',\n",
    "                              'kya baat hai', 'illegal weapon 2.0']\n",
    "\n",
    "    pyttsx3.speak(\"Good Evening \")\n",
    "\n",
    "    while True:\n",
    "        try:\n",
    "            status , photo = cap.read()\n",
    "            cv2.imshow(\"hi\", photo)\n",
    "            if cv2.waitKey(100) == 13:\n",
    "                break\n",
    "            #test\n",
    "\n",
    "            flag = 0\n",
    "            #test\n",
    "            hand = model.findHands(photo , draw=False )\n",
    "            if hand:\n",
    "\n",
    "                lmlist = hand[0]\n",
    "                fingeruplist = model.fingersUp(lmlist)\n",
    "                print(fingeruplist)\n",
    "                if fingeruplist is not None:\n",
    "                    if (flag ==0):\n",
    "                        pyttsx3.speak(\"Welcome to the Coffee shop, Tell me quantity you want ? \")\n",
    "                        flag=flag+1\n",
    "                    time.sleep(2)\n",
    "                if fingeruplist == [0 ,1 , 0, 0 , 0] : \n",
    "                    pyttsx3.speak(\"Your single Coffer is preparing, Please wait for 10 min \")\n",
    "                    pyttsx3.speak(\"Let's have some music\")\n",
    "                    #play music\n",
    "                    music_selected = rdm.choice(music_list)\n",
    "                    pywhatkit.playonyt(music_selected)                    \n",
    "                    time.sleep(1)\n",
    "                elif fingeruplist == [ 0 , 1 , 1 , 0 ,0 ]:\n",
    "                    pyttsx3.speak(\"we are preparing two coffee for you please wait, Have a great Day \")\n",
    "                    pyttsx3.speak(\"if you want to listen some music show me ok sign\")\n",
    "                    #play music    \n",
    "                    music_selected = rdm.choice(music_list)\n",
    "                    pywhatkit.playonyt(music_selected)\n",
    "                    time.sleep(1)\n",
    "                elif fingeruplist == [0,1,1,1,0]:\n",
    "                    pyttsx3.speak(\"we are preparing three coffee for you please wait, Have a great Day \")\n",
    "\n",
    "                else:\n",
    "                    pass\n",
    "            fingeruplist=None\n",
    "\n",
    "        except:\n",
    "            print(\"exception\")\n",
    "            pass\n",
    "\n",
    "\n",
    "    cv2.destroyAllWindows()\n",
    "\n",
    "    cap.release()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "52382afa",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tkinter import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5836903a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def videoDownload():\n",
    "    from pyyoutube import Api\n",
    "    from pytube import YouTube\n",
    "    from threading import Thread\n",
    "    from tkinter import messagebox\n",
    "\n",
    "\n",
    "    def get_list_videos():\n",
    "        global playlist_item_by_id\n",
    "        # Clear ListBox\n",
    "        list_box.delete(0, 'end')\n",
    "\n",
    "        # Create API Object\n",
    "        api = Api(api_key='AIzaSyDSn9HX5SHGsiyNl_bFDtP1cHaSaI1h1h4')\n",
    "\n",
    "        if \"youtube\" in playlistId.get():\n",
    "            playlist_id = playlistId.get()[len(\n",
    "                \"https://www.youtube.com/playlist?list=\"):]\n",
    "        else:\n",
    "            playlist_id = playlistId.get()\n",
    "\n",
    "        # Get list of video links\n",
    "        playlist_item_by_id = api.get_playlist_items(\n",
    "            playlist_id=playlist_id, count=None, return_json=True)\n",
    "\n",
    "        # Iterate through all video links and insert into listbox\n",
    "        for index, videoid in enumerate(playlist_item_by_id['items']):\n",
    "            list_box.insert(\n",
    "                END, f\" {str(index+1)}. {videoid['contentDetails']['videoId']}\")\n",
    "\n",
    "        download_start.config(state=NORMAL)\n",
    "\n",
    "\n",
    "    def threading():\n",
    "        # Call download_videos function\n",
    "        t1 = Thread(target=download_videos)\n",
    "        t1.start()\n",
    "\n",
    "\n",
    "    def download_videos():\n",
    "        download_start.config(state=\"disabled\")\n",
    "        get_videos.config(state=\"disabled\")\n",
    "\n",
    "        # Iterate through all selected videos\n",
    "        for i in list_box.curselection():\n",
    "            videoid = playlist_item_by_id['items'][i]['contentDetails']['videoId']\n",
    "\n",
    "            link = f\"https://www.youtube.com/watch?v={videoid}\"\n",
    "\n",
    "            yt_obj = YouTube(link)\n",
    "\n",
    "            filters = yt_obj.streams.filter(progressive=True, file_extension='mp4')\n",
    "\n",
    "            # download the highest quality video\n",
    "            filters.get_highest_resolution().download()\n",
    "\n",
    "        messagebox.showinfo(\"Success\", \"Video Successfully downloaded\")\n",
    "        download_start.config(state=\"normal\")\n",
    "        get_videos.config(state=\"normal\")\n",
    "\n",
    "\n",
    "    # Create Object\n",
    "    root = Tk()\n",
    "    # Set geometry\n",
    "    root.geometry('400x400')\n",
    "\n",
    "    # Add Label\n",
    "    Label(root, text=\"Youtube Playlist Downloader\",\n",
    "        font=\"italic 15 bold\").pack(pady=10)\n",
    "    Label(root, text=\"Enter Playlist URL:-\", font=\"italic 10\").pack()\n",
    "\n",
    "    # Add Entry box\n",
    "    playlistId = Entry(root, width=60)\n",
    "    playlistId.pack(pady=5)\n",
    "\n",
    "    # Add Button\n",
    "    get_videos = Button(root, text=\"Get Videos\", command=get_list_videos)\n",
    "    get_videos.pack(pady=10)\n",
    "\n",
    "    # Add Scrollbar\n",
    "    scrollbar = Scrollbar(root)\n",
    "    scrollbar.pack(side=RIGHT, fill=BOTH)\n",
    "    list_box = Listbox(root, selectmode=\"multiple\")\n",
    "    list_box.pack(expand=YES, fill=\"both\")\n",
    "    list_box.config(yscrollcommand=scrollbar.set)\n",
    "    scrollbar.config(command=list_box.yview)\n",
    "\n",
    "    download_start = Button(root, text=\"Download Start\",\n",
    "                            command=threading, state=DISABLED)\n",
    "    download_start.pack(pady=10)\n",
    "\n",
    "    # Execute Tkinter\n",
    "    root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "00d38013",
   "metadata": {},
   "outputs": [],
   "source": [
    "def pomodoro():\n",
    "    import tkinter as tk\n",
    "    import time\n",
    "\n",
    "    # Create the main application window\n",
    "    root = tk.Tk()\n",
    "    root.title(\"Pomodoro Timer\")\n",
    "    root.geometry(\"300x200\")\n",
    "    root.configure(bg=\"#f0f0f0\")\n",
    "\n",
    "    # Initialize pomodoro_active flag\n",
    "    pomodoro_active = False\n",
    "\n",
    "    # Define Pomodoro functions\n",
    "    def start_pomodoro():\n",
    "        work_time = 25 * 60\n",
    "        short_break_time = 5 * 60\n",
    "        long_break_time = 15 * 60\n",
    "        num_work_sessions = 4\n",
    "\n",
    "        global pomodoro_active\n",
    "        pomodoro_active = True\n",
    "\n",
    "        while pomodoro_active and num_work_sessions > 0:\n",
    "            countdown(work_time, \"Work Time\")\n",
    "            if pomodoro_active:\n",
    "                countdown(short_break_time, \"Short Break Time\")\n",
    "                num_work_sessions -= 1\n",
    "\n",
    "        if pomodoro_active:\n",
    "            countdown(long_break_time, \"Long Break Time\")\n",
    "\n",
    "        pomodoro_active = False\n",
    "        timer_label.config(text=\"Pomodoro Stopped\", fg=\"red\")\n",
    "\n",
    "    def stop_pomodoro():\n",
    "        global pomodoro_active\n",
    "        pomodoro_active = False\n",
    "        timer_label.config(text=\"Pomodoro Stopped\", fg=\"red\")\n",
    "\n",
    "    def countdown(seconds, session_type):\n",
    "        global pomodoro_active\n",
    "        while seconds and pomodoro_active:\n",
    "            mins, secs = divmod(seconds, 60)\n",
    "            timer_label.config(text=f\"{session_type}\\n{mins:02d}:{secs:02d}\", fg=\"black\")\n",
    "            root.update()\n",
    "            time.sleep(1)\n",
    "            seconds -= 1\n",
    "        if pomodoro_active:\n",
    "            timer_label.config(text=\"Session Complete!\", fg=\"green\")\n",
    "            root.update()\n",
    "            time.sleep(2)\n",
    "            timer_label.config(text=\"\")\n",
    "            root.update()\n",
    "\n",
    "    # Create and position the buttons\n",
    "    button_pomodoro = tk.Button(root, text=\"Start Pomodoro\", command=start_pomodoro, padx=10, pady=5, bg=\"#ff9800\", fg=\"white\")\n",
    "    button_pomodoro.pack(pady=20)\n",
    "\n",
    "    button_stop_pomodoro = tk.Button(root, text=\"Stop Pomodoro\", command=stop_pomodoro, padx=10, pady=5, bg=\"#e91e63\", fg=\"white\")\n",
    "    button_stop_pomodoro.pack(pady=10)\n",
    "\n",
    "    timer_label = tk.Label(root, text=\"\", font=(\"Helvetica\", 20), bg=\"#f0f0f0\")\n",
    "    timer_label.pack()\n",
    "\n",
    "    # Start the main event loop\n",
    "    root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "de39d460",
   "metadata": {},
   "outputs": [],
   "source": [
    "def lanchain_dalle():\n",
    "    inp = input(\"Enter your prompt : \")\n",
    "    key= \"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\"\n",
    "    myllm = OpenAI(\n",
    "    model = 'text-davinci-003',\n",
    "    temperature=1,\n",
    "    openai_api_key=key\n",
    "    )\n",
    "    os.environ['OPENAI_API_KEY'] = key\n",
    "    tools = load_tools(['dalle-image-generator'])\n",
    "    agent = initialize_agent(tools, llm =myllm, agent=\"zero-shot-react-description\", verbose=True)\n",
    "    output = agent.run(inp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b6c2cea1",
   "metadata": {},
   "outputs": [],
   "source": [
    "def rock_paper_sci():\n",
    "    cap = cv2.VideoCapture(0)  \n",
    "    detector = HandDetector()\n",
    "    sp = pyttsx3.init()\n",
    "\n",
    "    gestures = [\"rock\", \"paper\", \"scissors\"]\n",
    "\n",
    "    def detect_user_gesture(img):\n",
    "        img1 = detector.findHands(img, draw = False)\n",
    "\n",
    "        if img1:\n",
    "            lmlist = img1[0]\n",
    "            handphoto = detector.fingersUp(lmlist)\n",
    "            return img, handphoto\n",
    "        else:\n",
    "            return None, None\n",
    "\n",
    "    def get_computer_gesture():\n",
    "        return random.choice(gestures)\n",
    "\n",
    "\n",
    "    def get_winner(user_gesture, computer_gesture):\n",
    "\n",
    "        if user_gesture == computer_gesture:\n",
    "            sp.say(\"its a tie\")\n",
    "            sp.runAndWait()\n",
    "            return \"It's a tie!\"\n",
    "\n",
    "        elif (user_gesture == \"rock\" and computer_gesture == \"scissors\") or \\\n",
    "             (user_gesture == \"paper\" and computer_gesture == \"rock\") or \\\n",
    "             (user_gesture == \"scissors\" and computer_gesture == \"paper\"):\n",
    "            sp.say(\"You Win\")\n",
    "            sp.runAndWait()\n",
    "\n",
    "            return \"You win!\"\n",
    "\n",
    "        else:\n",
    "            sp.say(\"Computer Wins\")\n",
    "            sp.runAndWait()\n",
    "\n",
    "            return \"Computer wins!\"\n",
    "\n",
    "    def findGestures(lm, img):\n",
    "        if lm == [0,0,0,0,0]:\n",
    "            sp.say(\"Rock\")\n",
    "            sp.runAndWait()\n",
    "            return \"rock\"\n",
    "        elif lm == [1,1,1,1,1]:\n",
    "            sp.say(\"Paper\")\n",
    "            sp.runAndWait()\n",
    "            return \"paper\"\n",
    "        elif lm == [0, 1, 1, 0, 0]:\n",
    "            sp.say(\"scissor\")\n",
    "            sp.runAndWait()\n",
    "            return 'scissors'\n",
    "        else:\n",
    "            return None\n",
    "\n",
    "    while True:\n",
    "        status , img = cap.read()\n",
    "\n",
    "        cv2.imshow(\"myphoto\",img)\n",
    "        user_img, user_lmList = detect_user_gesture(img)\n",
    "\n",
    "        computer_gesture = get_computer_gesture()\n",
    "\n",
    "        user_gesture = findGestures(user_lmList, img)\n",
    "        if  user_gesture!=None:\n",
    "            print(user_gesture, computer_gesture.capitalize())\n",
    "            winner = get_winner(user_gesture, computer_gesture)\n",
    "            print(user_img, winner)\n",
    "            time.sleep(2)\n",
    "\n",
    "\n",
    "        if cv2.waitKey(10) == 13:\n",
    "            break\n",
    "    cv2.destroyAllWindows()\n",
    "\n",
    "\n",
    "    cap.release()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7c53be67",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def open_software(software_name):\n",
    "    software_path = {\n",
    "        \"notepad\": \"notepad.exe\",\n",
    "        \"calculator\": \"calc.exe\",\n",
    "        \"paint\": \"mspaint.exe\",\n",
    "        \"chrome\":\"chrome.exe\",\n",
    "        \"command prompt\":\"cmd.exe\",\n",
    "        \"explorer\":\"explorer.exe\",\n",
    "        \"vlc\":\"vlc.exe\",\n",
    "         \"taskmgr\":\"taskmgr\",\n",
    "        # Add more software names and paths here\n",
    "    }\n",
    "\n",
    "    if software_name in software_path:\n",
    "        try:\n",
    "            os.startfile(software_path[software_name])\n",
    "        except Exception as e:\n",
    "            status_label.config(text=f\"Error: {e}\")\n",
    "    else:\n",
    "        status_label.config(text=\"Software not found.\")\n",
    "    pass\n",
    "\n",
    "def whatsapp():\n",
    "    from pynput.keyboard import Key, Controller\n",
    "    keyboard = Controller()\n",
    "    try:\n",
    "        pywhatkit.sendwhatmsg_instantly(\n",
    "            phone_no=\"+7764950400\", \n",
    "            message=\"Hello from sachin\",\n",
    "            tab_close=True\n",
    "        )\n",
    "        time.sleep(20)\n",
    "        pyautogui.click()\n",
    "        time.sleep(5)\n",
    "        keyboard.press(Key.enter)\n",
    "        keyboard.release(Key.enter)\n",
    "        print(\"Message sent!\")\n",
    "    except Exception as e:\n",
    "        print(str(e))\n",
    "        \n",
    "        \n",
    "def message():\n",
    "\n",
    "        client = Client(\"AC39df9b5371d70d011422b50c00ad1408\", \"b30460e4fd84223ba4c20e1982644faa\")\n",
    "        client.messages.create(to=\"+917764950400\", \n",
    "                               from_=\"+14177364758\", \n",
    "                               body=\"Hello Linux World!\")\n",
    "\n",
    "\n",
    "def click_photo():\n",
    "\n",
    "   cap=cv2.VideoCapture(0)\n",
    "   cap\n",
    "   status ,photo =cap.read()\n",
    "   cv2.imwrite(\"pic.jpg\",photo)\n",
    "   cv2.imshow(\"My photo\",photo)\n",
    "   cv2.waitKey(5000)\n",
    "   cv2.destroyAllWindows()\n",
    "   cap.release()\n",
    "    \n",
    "\n",
    "def crop_pic():\n",
    "   cap=cv2.VideoCapture(0)\n",
    "   cap\n",
    "   status ,photo =cap.read()\n",
    "   cv2.imwrite(\"pic.jpg\",photo)\n",
    "   cv2.imshow(\"My photo\",photo[200:540,200:430])\n",
    "   cv2.waitKey(5000)\n",
    "   cv2.destroyAllWindows()\n",
    "   cap.release()\n",
    "    \n",
    "def face_swap():    \n",
    "    pic1=cv2.imread(\"kohli.jpeg.jpg\")\n",
    "    pic3=cv2.imread(\"babar.png\")\n",
    "    pic3[100:280,220:370]=pic1[120:300,200:350]\n",
    "    cv2.imshow(\"my photo\",pic3)\n",
    "    cv2.waitKey()\n",
    "    cv2.destroyAllWindows()    \n",
    "    \n",
    "def capture_video():\n",
    "    cap=cv2.VideoCapture(0)\n",
    "    while True:\n",
    "        status ,photo=cap.read()\n",
    "        cv2.imshow(\"My photo\",photo)\n",
    "        if cv2.waitKey(5)==13:\n",
    "            break\n",
    "    cv2.destroyAllWindows()\n",
    "\n",
    "def capture_crop_video():\n",
    "    cap=cv2.VideoCapture(0)\n",
    "    while True:\n",
    "        status ,photo=cap.read()\n",
    "        photo[0:200,0:200]=photo[200:400,200:400]\n",
    "        cv2.imshow(\"My photo\",photo)\n",
    "        if cv2.waitKey(5)==13:\n",
    "            break\n",
    "    cv2.destroyAllWindows()\n",
    "\n",
    "    \n",
    "def image_100_100():\n",
    "    # Create a blank canvas for the image\n",
    "    width = 400\n",
    "    height = 300\n",
    "    channels = 3\n",
    "    image = np.zeros((height, width, channels), dtype=np.uint8)\n",
    "\n",
    "    #Background (lemon)\n",
    "    image[:300, 0:400, 0] = 255\n",
    "    image[:300, 0:400, 1] = 255\n",
    "    image[:300, 0:400, 2] = 102\n",
    "\n",
    "    # Table (Brown)\n",
    "    #1st leg\n",
    "\n",
    "    image[200:300, 50:100 , 0] = 55\n",
    "    image[200:300, 50:100, 1] = 0\n",
    "    image[200:300, 50:100, 2] = 9\n",
    "\n",
    "    #2nd leg\n",
    "\n",
    "    image[200:300, 300:350 , 0] = 55\n",
    "    image[200:300, 300:350, 1] = 0\n",
    "    image[200:300,300:350, 2] = 9\n",
    "\n",
    "    # Surface\n",
    "    image[175:200,25:375, 0] = 55\n",
    "    image[175:200,25:375, 1] = 0\n",
    "    image[175:200,25:375, 2] = 9\n",
    "\n",
    "\n",
    "    # TV (Black)\n",
    "    # base (black)\n",
    "\n",
    "    image[160:175,160:240, 0] = 0\n",
    "    image[160:175,160:240, 1] = 0\n",
    "    image[160:175,160:240, 2] = 0\n",
    "\n",
    "    # Screen back\n",
    "    image[50:160, 100:300,0] = 0\n",
    "    image[50:160, 100:300,1] = 0\n",
    "    image[50:160, 100:300,2] = 0\n",
    "\n",
    "    # Screen(view) (sky blue)\n",
    "\n",
    "    image[60:150, 110:290, 0] = 108\n",
    "    image[60:150, 110:290, 1] = 255\n",
    "    image[60:150, 110:290, 2] = 255\n",
    "    # Display the image\n",
    "    plt.imshow(image)\n",
    "    plt.axis('on')\n",
    "    plt.show()\n",
    "\n",
    "\n",
    "\n",
    "    \n",
    "def get_coordinates():\n",
    "    location_name = input(\"enter the city name:\")\n",
    "    geolocator = Nominatim(user_agent=\"location_finder\")\n",
    "    location = geolocator.geocode(location_name)\n",
    "    if location is None:\n",
    "        print(f\"Coordinates not found for '{location_name}'.\")\n",
    "        return None\n",
    "    else:\n",
    "        latitude = location.latitude\n",
    "        longitude = location.longitude\n",
    "        print(f\"Coordinates for '{location_name}': Latitude = {latitude}, Longitude = {longitude}.\")\n",
    "        return latitude, longitude\n",
    "\n",
    "    # Replace 'New York City' with your desired location.\n",
    "    location_name = input(\"enter the city name:\")\n",
    "    \n",
    "\n",
    "def top_10_google_searches():\n",
    "\n",
    "    query = input(\"Enter what you want to search: \")\n",
    "    result = int(input(\"How many results you want: \"))\n",
    "\n",
    "    for i in search(query, num=result, stop=result, pause=2):\n",
    "        print(i)\n",
    "        \n",
    "def instabot():\n",
    "    # Set your Instagram username and password\n",
    "    username = \"python4873\"\n",
    "    password = \"redhat123\"\n",
    "\n",
    "    # Create an instance of the Instabot class\n",
    "    bot = Bot()\n",
    "\n",
    "    # Log in to Instagram\n",
    "    bot.login(username=username, password=password, use_cookie=False, ask_for_code=True)\n",
    "\n",
    "    # Open the image and resize it to a square (1:1) aspect ratio\n",
    "    image_path = \"vimal.jpeg\" # Use forward slashes in the path\n",
    "    image = Image.open(image_path)\n",
    "    width, height = image.size\n",
    "    min_dimension = min(width, height)\n",
    "    resized_image = image.crop((0, 0, min_dimension, min_dimension))\n",
    "\n",
    "    # Save the resized image to a temporary file\n",
    "    temp_image_path = \"temp.jpg\"\n",
    "    resized_image.save(temp_image_path)\n",
    "\n",
    "    # Upload the resized image with a caption\n",
    "    caption = \"failure is the best teacher if you fail in right direction then you will acheive success!\"\n",
    "    bot.upload_photo(temp_image_path, caption=caption)\n",
    "\n",
    "    # Logout from your account\n",
    "    bot.logout()\n",
    "\n",
    "        \n",
    "def launch_instance():\n",
    "    launch = boto3.client('ec2',region_name='ap-south-1')\n",
    "    launch.run_instances(\n",
    "        ImageId='ami-0da59f1af71ea4ad2',\n",
    "        InstanceType='t2.micro',\n",
    "        MaxCount=1,\n",
    "        MinCount=1\n",
    "        )\n",
    "    describe_instance = boto3.client('ec2')\n",
    "    describe_instance.describe_instances()\n",
    "    \n",
    "def create_bucket():\n",
    "    bucket = boto3.client('s3',region_name='ap-south-1')\n",
    "    bucket.create_bucket(\n",
    "    Bucket='sachinbuc28158',\n",
    "    ACL='private',\n",
    "    CreateBucketConfiguration={\n",
    "          'LocationConstraint': 'ap-south-1'}\n",
    "    )\n",
    "    \n",
    "    \n",
    "def use_sns_service():\n",
    "    sns = boto3.client('sns',region_name='ap-south-1')\n",
    "    sns.publish(\n",
    "    Message='Dont take it serious.',\n",
    "    Subject='this is automatd sns service.',\n",
    "    TopicArn='arn:aws:sns:ap-south-1:351345331205:myeventopic'\n",
    "    )\n",
    "    print(\"email sent\")\n",
    "    \n",
    "\n",
    "def create_button(parent, label, command):\n",
    "    button = tk.Button(parent,font=(\"Arial\",10,\"bold\"), text=label,width=20,height=2, command=command)\n",
    "    return button\n",
    "\n",
    "\n",
    "root = tk.Tk()\n",
    "root.title(\"Summer Project\")\n",
    "root.geometry(\"1200x900\")\n",
    "root.configure(bg=\"Black\")\n",
    "\n",
    "\n",
    "software_entry = tk.Label(root,font=(\"Arial\",14,\"bold\"), text=\"MENU\",width=20,height=2)\n",
    "software_entry.pack(pady=20)\n",
    "\n",
    "\n",
    "buttons_frame = tk.Frame(root, bg=\"orange\")\n",
    "buttons_frame.pack(padx=20, pady=20, fill=\"both\", expand=True)\n",
    "\n",
    "\n",
    "button_notepad = create_button(buttons_frame, \"VIDEO DOWNLOADER\",videoDownload)\n",
    "button_calculator = create_button(buttons_frame, \"EC2 WITH HANDS\", ec2_finger)\n",
    "button_paint = create_button(buttons_frame, \"VOICE ASSISTANT\", assistant)\n",
    "button_chrome = create_button(buttons_frame, \"TWO FUNCTIONS\", simaltanous)\n",
    "button_face_swap = create_button(buttons_frame, \"FACE SWAP\", face_swap)\n",
    "button_explorer = create_button(buttons_frame, \"COFFEE MAKER\", coffeeMaker)\n",
    "button_vlc = create_button(buttons_frame, \"REKOGNITON\", rekognition)\n",
    "button_instabot = create_button(buttons_frame, \"INSTABOT\",instabot)\n",
    "button_whatsapp = create_button(buttons_frame, \"SEND WHATSAPP\", whatsapp)\n",
    "button_message = create_button(buttons_frame, \"SEND MESSAGE\", message)\n",
    "button_photo = create_button(buttons_frame, \"CLICK PHOTO\",click_photo)\n",
    "button_croppic = create_button(buttons_frame, \"CROP PHOTO\",crop_pic)\n",
    "button_video = create_button(buttons_frame, \"CAPTURE VIDEO\",capture_video)\n",
    "button_cropvideo = create_button(buttons_frame,\"CROP VIDEO\",capture_crop_video)\n",
    "button_image= create_button(buttons_frame,\"IMAGE_CREATION\",image_100_100)\n",
    "button_coordinates = create_button(buttons_frame,\"GEO COORDINATES\" ,lambda:get_coordinates())\n",
    "button_searchresults = create_button(buttons_frame,\"GOOGLE SEARCH\",lambda:top_10_google_searches())\n",
    "button_launchinstance = create_button(buttons_frame,\"LAUNCH INSTANCE\",launch_instance)\n",
    "button_createbucket = create_button(buttons_frame,\"CREATE BUCKET\",create_bucket)\n",
    "button_usesnsservice = create_button(buttons_frame,\"USE SNS SERVICE\",use_sns_service)\n",
    "button_rock_paper = create_button(buttons_frame, \"ROCK PAPER SCISSOR\", rock_paper_sci)\n",
    "button_dalle = create_button(buttons_frame, \"IMAGE BY DALLE\", lanchain_dalle)\n",
    "button_linear = create_button(buttons_frame, \"LINEAR REGRESSION\", linearReg)\n",
    "button_load = create_button(buttons_frame, \"DOCUMENT LOADER\", document_loader)\n",
    "button_pomodoro = create_button(buttons_frame, \"POMODORO\", pomodoro)\n",
    "button_cartoon = create_button(buttons_frame, \"CARTOON VIDEO\", cartoon)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "button_notepad.grid(row=0, column=0, padx=20, pady=40)\n",
    "button_calculator.grid(row=0, column=1, padx=20, pady=20)\n",
    "button_paint.grid(row=0, column=2, padx=30, pady=20)\n",
    "button_chrome.grid(row=0, column=3, padx=10, pady=20)\n",
    "button_face_swap.grid(row=1, column=0, padx=20, pady=20)\n",
    "button_explorer.grid(row=1, column=1, padx=30, pady=20)\n",
    "button_vlc.grid(row=1, column=2, padx=10, pady=20)\n",
    "button_instabot.grid(row=1, column=3, padx=10, pady=20)\n",
    "button_whatsapp.grid(row=2, column=0, padx=20, pady=20)\n",
    "button_message.grid(row=2, column=1, padx=30, pady=20)\n",
    "button_photo.grid(row=2, column=2, padx=20, pady=20)\n",
    "button_croppic.grid(row=2, column=3, padx=30, pady=20)\n",
    "button_video.grid(row=3, column=0, padx=40, pady=20)\n",
    "button_cropvideo.grid(row=3, column=1, padx=50, pady=20)\n",
    "button_image.grid(row=3, column=2,padx=40, pady=20)\n",
    "button_coordinates.grid(row=3, column=3, padx=50, pady=20)\n",
    "button_searchresults.grid(row=4, column=0, padx=40, pady=20) \n",
    "button_launchinstance.grid(row=4, column=1, padx=40, pady=20)\n",
    "button_createbucket.grid(row=4, column=2, padx=40, pady=20)\n",
    "button_usesnsservice.grid(row=4, column=3, padx=40, pady=20)\n",
    "button_rock_paper.grid(row=5, column=0, padx=40, pady=20)\n",
    "button_dalle.grid(row=5, column=1, padx=40, pady=20)\n",
    "button_linear.grid(row=5, column=2, padx=40, pady=20)\n",
    "button_load.grid(row=5, column=3, padx=40, pady=20)\n",
    "button_pomodoro.grid(row=6, column=1, padx=40, pady=20)\n",
    "button_cartoon.grid(row=6, column=0, padx=40, pady=20)\n",
    "\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d2be0330",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d10f5ebb",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "730455e0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6802515a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "01f96a25",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7f518b57",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cbb3e94a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
